import org.apache.tools.ant.taskdefs.condition.Os

//Settings for Janeway related to modules and creating the distribution
def modulesList = ['DefectTracker', 'RequirementManager', 'PostBoard']
def modulesDir = 'modules'
def modulesConf = 'modules.conf'
def libsDir = 'libs'

apply plugin: 'application'

mainClassName = "edu.wpi.cs.wpisuitetng.janeway.Janeway"
//applicationDefaultJvmArgs = ["-Dgreeting.language=en"]

modulesList.each {
    evaluationDependsOn(":${it}")
}

dependencies{
	compile 'com.lowagie:itext:2.1.5'
	compile 'org.swinglabs.swingx:swingx-all:1.6.4'
	compile 'org.jfree:jfreechart:1.0.14'
	compile 'org.jfree:jcommon:1.0.17'
	compile 'com.miglayout:miglayout-swing:4.1' //Used to be 4.0, will this cause issues?
	
    //Core projects
	compile project(':JanewayAPI')
    compile project(':WPISuite-Interfaces')
    compile project(':Network')
	
	//Modules
    modulesList.each {
	    runtime project(":${it}")
        }
}

eclipse{
	project{
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			buildCommand 'org.eclipse.ui.externaltools.ExternalToolBuilder', LaunchConfigHandle: '<project>/.externalToolBuilders/Gradle - Prepare Modules - Windows.launch'
		} else {
			buildCommand 'org.eclipse.ui.externaltools.ExternalToolBuilder', LaunchConfigHandle: '<project>/.externalToolBuilders/Gradle - Prepare Modules - Unix.launch'
		}
	}
}

jar {
    manifest{
        attributes('Class-Path': configurations.runtime.files.collect {
            if(!modulesList.contains(it.name.minus(".jar")) || 'Janeway'.equals(it.name.minus("jar")))
            {"${libsDir}/${it.name}"}}.join(' ') )
        attributes('Main-Class': "${mainClassName}")
    }
}

task modules(type: Copy) {
    dependsOn jar
    
    modulesList.each{
        from(project(":${it}").libsDir) {
            include '*.jar'
        }
        into modulesDir
    }
}

//TODO Start using when Distribution plugin is further developed
//Until then a custom task is more ideal

distZip.enabled = false
distTar.enabled = false
installApp.enabled = false
startScripts.enabled = false

task distribution(type: Zip){
    archiveName = "${project.name}.zip"
    
    //Main jar
    from(jar){
        into "${project.name}"
    }
    
    //Scripts to launch
    //from(startScripts)
    
    //Libraries
    from(configurations.runtime){
        into "${project.name}/${libsDir}"
        //Exclude modules
        modulesList.each{
            excludes.add("${it}.jar")
        }
    }
    
    //Modules
    from(modules) {
        into "${project.name}/${modulesDir}"
        
    }
    
    //Module configuration file
    from(modulesConf){
        into "${project.name}"
    }
}

